<?php

namespace AppBundle\Repository;
use AppBundle\Utils\Utils;
/**
 * OrdersRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OrdersRepository extends AppRepository
{
    protected $subquery = [
        //        'production' => 'SELECT DISTINCT prod.id FROM AppBundle:Positions pos INNER JOIN pos.production prod WHERE pos.order = e.id',
        'production_null' => "SELECT DISTINCT pr1.id FROM AppBundle\Entity\Positions p1 LEFT JOIN p1.production pr1 WHERE p1.order = e.id",
        'production' => "SELECT DISTINCT pr1.id FROM AppBundle\Entity\Positions p1 LEFT JOIN p1.production pr1 WHERE p1.order = e.id",
        //'production' => 'SELECT DISTINCT pos.production FROM AppBundle\\Entity\\Positions pos WHERE pos.order = e.id',
            
    ];
//            
//    protected function getQueryFields($type=''){
//        $fields=[];
//        switch($type){
//            
//            default:
//                $fields= [
//                    'id',
//                    'created',
//                    'approved',
//                    'dateStart',
//                    'number', 
//                    'clientNumber', 
//                    'quantity',
//                    'area',
//                    'value',
//                    'status',
//                    'progress',
//                    'express',
//                    'clientComment',
//                    'orderComment',
//                    'prodComment',
//                    'clientInfo'
//                ] ;
//        }
//        return $fields;
//    }
//            
//        
//    protected function customQuery($value, $options){
//        switch($options['subquery']){
//                case 'production_null':
//                $this->qb->andWhere( "e.production IS NULL");
//            break;
//            case 'production':
//                $this->qb->orWhere( "e.production = :val ")
//                    ->setParameter('val', $value );
//            break;
//    
//        }
//        
//    }
//
//    public function getList($options=[])
//    {
//        return parent::getList(array_replace([
//                'query' => $this->generateQuery($this->getQueryFields())
//            ],
//            $options
//        ));
//    }
//            
//        
    public function countImported($deliveryId, $client){
        $this->query="count(e.id)";
        
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();
        $qb
            ->select("count(e.id)")
            ->from($this->_entityName, 'e')
            ->where('e.did=:did')
            ->setParameter('did', $deliveryId);
        $query = $qb->getQuery();
        $result= $query->getSingleScalarResult();
        return $result;

    }

    private function setFiltersToProduction(&$options){
        Utils::deep_array_value_set('filters-approved', $options, [
            'name' => 'approved',
            'value' => null,
            'options' => [ 'not' => true ]
        ] );
        Utils::deep_array_value_set('filters-production', $options, [
            'name' => 'production',
            'value' => null
        ] );
        Utils::deep_array_value_set('filters-status', $options, [
            'name' => 'status',
            'value' => [ 2, 3 ]
        ] );
        return $options;
    }

    private function setFiltersToDelivery(&$options){
        Utils::deep_array_value_set('filters-production', $options, [
            'name' => 'production',
            'value' => null,
            'options' => [ 'not' => true ]
        ] );
        Utils::deep_array_value_set('filters-delivery', $options, [
            'name' => 'delivery',
            'value' => null
        ] );
        return $options;
    }

    public function getListToProduction($options=[]){
        $this->init();
        $this->setFiltersToProduction($options);
        $options['query'] = $this->generateQuery($this->getQueryFields('list_to_production'));
        return $this->action($options);
    }

    public function getListToDelivery($options=[]){
        $this->init();
        $this->setFiltersToDelivery($options);
        $options['query'] = $this->generateQuery($this->getQueryFields('list_to_delivery'));
        return $this->action($options);
    }

    public function toProduction($ids=[], $options=[]){
        $this->setFiltersToProduction($options);
        return $this->getEntitiesByIds($ids, $options);
    }            

    public function toDelivery($ids=[], $options=[]){
        $this->setFiltersToDelivery($options);
        return $this->getEntitiesByIds($ids, $options);
    }            
}
